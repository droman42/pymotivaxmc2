name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write  # Required for trusted publishing to PyPI

jobs:
  validate-version:
    name: Validate Tag Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag-version: ${{ steps.get-version.outputs.tag-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract and validate versions
        id: get-version
        run: |
          # Extract version from git tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "tag-version=$TAG_VERSION" >> $GITHUB_OUTPUT
          
          # Extract version from pyproject.toml
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT
          
          echo "🏷️  Git tag version: $TAG_VERSION"
          echo "📄 pyproject.toml version: $PYPROJECT_VERSION"
          
          # Compare versions
          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "❌ Version mismatch detected!"
            echo "   Git tag: v$TAG_VERSION"
            echo "   pyproject.toml: $PYPROJECT_VERSION"
            echo "   Please ensure both versions match before creating a release."
            exit 1
          fi
          
          echo "✅ Version validation passed: $TAG_VERSION"

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: validate-version
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
      
      - name: Build source distribution and wheel
        run: |
          python -m build
          echo "📦 Built packages:"
          ls -la dist/
      
      - name: Verify distribution
        run: |
          python -m twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-version, build]
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, publish-pypi]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog
      
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^v${VERSION}$" | head -n1)
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## 📋 Changes since $PREVIOUS_TAG" > release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" >> release-notes.md
          else
            echo "## 🎉 Initial Release" > release-notes.md
            echo "" >> release-notes.md
            echo "First release of pymotivaxmc2 v${VERSION}" >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "## 📦 Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "pip install pymotivaxmc2==${VERSION}" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release v${{ needs.validate-version.outputs.version }}"
          body_path: release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
          append_body: true 